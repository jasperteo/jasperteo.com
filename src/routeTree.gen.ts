/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorksRouteRouteImport } from './routes/works/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorksLiquidGlassRouteImport } from './routes/works/liquid-glass'

const WorksRouteRoute = WorksRouteRouteImport.update({
  id: '/works',
  path: '/works',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorksLiquidGlassRoute = WorksLiquidGlassRouteImport.update({
  id: '/liquid-glass',
  path: '/liquid-glass',
  getParentRoute: () => WorksRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/works': typeof WorksRouteRouteWithChildren
  '/works/liquid-glass': typeof WorksLiquidGlassRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/works': typeof WorksRouteRouteWithChildren
  '/works/liquid-glass': typeof WorksLiquidGlassRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/works': typeof WorksRouteRouteWithChildren
  '/works/liquid-glass': typeof WorksLiquidGlassRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/works' | '/works/liquid-glass'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/works' | '/works/liquid-glass'
  id: '__root__' | '/' | '/works' | '/works/liquid-glass'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorksRouteRoute: typeof WorksRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/works': {
      id: '/works'
      path: '/works'
      fullPath: '/works'
      preLoaderRoute: typeof WorksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/liquid-glass': {
      id: '/works/liquid-glass'
      path: '/liquid-glass'
      fullPath: '/works/liquid-glass'
      preLoaderRoute: typeof WorksLiquidGlassRouteImport
      parentRoute: typeof WorksRouteRoute
    }
  }
}

interface WorksRouteRouteChildren {
  WorksLiquidGlassRoute: typeof WorksLiquidGlassRoute
}

const WorksRouteRouteChildren: WorksRouteRouteChildren = {
  WorksLiquidGlassRoute: WorksLiquidGlassRoute,
}

const WorksRouteRouteWithChildren = WorksRouteRoute._addFileChildren(
  WorksRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorksRouteRoute: WorksRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
